import Card from "@/components/Card";
import { InputField } from "@/components/InputField";
import { useFormik } from "formik";
import Head from "next/head";
import Image from "next/image";
import { Edit, Trash } from "react-feather";
import { useMutation, useQuery } from "react-query";
import * as yup from "yup";
import { httpsClient } from "../lib/httpClient";
import { useRouter } from "next/router";
import Dialog from "@/components/Modal";
import { useState } from "react";
import axios from "axios";

export default function Home() {
  const router = useRouter();
  const [todoId, setTodoId] = useState();

  // Fetch Todo
  const getTodo = async () => {
    const res = await axios.get("/api/todos");
    return res.data.message;
  };
  const todoQueryResult = useQuery(["TODOS"], getTodo);

  // create Todo
  const createTodoMutation = async (data: any) => {
    const res = await axios.post("/api/todos", data);
    return res.data;
  };
  const formik = useFormik({
    initialValues: {
      name: "",
    },
    validationSchema: yup.object({
      name: yup.string().required().label("Todo"),
    }),
    onSubmit: (values) => {
      createTodoMutation(values);
    },
  });

  // delete todo
  const deleteMutation = async (id : string) => {
    const res = await axios.delete(`/api/todo/${id}`)
    return res.data
  }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-gray-100 h-screen">
        <div className="max-w-[700px] mx-auto px-30 pt-10 mb-8">
          <div className="bg-light bg-white shadow-md p-4">
            <h1 className="text-3xl font-semibold text-center py-3">
              TODO APP
            </h1>
            <div>
              <InputField
                label=""
                placeholder="Add todo"
                id="name"
                error={!!formik?.touched.name && !!formik.errors.name}
                helperText={!!formik?.touched?.name && formik?.errors?.name}
                inputProps={{
                  value: formik.values.name,
                  onChange: formik?.handleChange("name"),
                  onBlur: formik?.handleBlur("name"),
                }}
              />
              <div className="flex justify-center">
                <button
                  type="submit"
                  onClick={() => formik.handleSubmit()}
                  className="inline-flex cursor-pointer justify-center items-center text-[13px] font-semibold gap-1 px-3 py-2 rounded-lg leading-[24px] bg-gray-900 text-white"
                >
                  Add Todo
                </button>
              </div>
            </div>
          </div>
        </div>
        <div className="max-w-[700px] mx-auto px-30">
          {todoQueryResult.data?.length < 1 ? (
            "Nothing on todo list"
          ) : (
            <div>
              {todoQueryResult.data?.map((todo: any, index: number) => (
                <Card key={index} className="justify-between px-4 py-5">
                  <p className="text-lg font-medium">{todo.name}</p>
                  <div className="flex items-center">
                    <button
                      onClick={() => {
                        // setTodoId()
                        // formik.setFieldValue()
                        router.push("/?update_todo=true");
                      }}
                      className="px-2 bg-transparent border-none"
                    >
                      <Edit size={15} />
                    </button>
                    <button 
                    onClick={() => deleteMutation(todo._id)}
                    className="px-2 bg-transparent border-none">
                      <Trash size={15} />
                    </button>
                  </div>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>
      {router.query.update_todo && (
        <Dialog variant="scroll" open={false} onClose={() => router.back()}>
          <div className="px-4">
            <InputField
              label=""
              placeholder="Add todo"
              id="name"
              error={!!formik?.touched.name && !!formik.errors.name}
              helperText={!!formik?.touched?.name && formik?.errors?.name}
              inputProps={{
                value: formik.values.name,
                onChange: formik?.handleChange("name"),
                onBlur: formik?.handleBlur("name"),
              }}
            />
          </div>
        </Dialog>
      )}
    </>
  );
}

export async function getServerSideProps(ctx: any) {
  let dev = process.env.NODE_ENV !== "production";
  let { DEV_URL, PROD_URL } = process.env;

  let response = await fetch(`${dev ? DEV_URL : PROD_URL}/api/todos`);

  let data = await response.json();
  return {
    props: {
      todos: data["message"],
    },
  };
}
